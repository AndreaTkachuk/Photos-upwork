{"mappings":"ACEA,SAAS,gBAAgB,CAAC,mBAAoB,WAE5C,IAAM,EAAoB,CACxB,MAAO,SAAS,cAAc,CAAC,SAC/B,QAAS,SAAS,cAAc,CAAC,WACjC,QAAS,SAAS,cAAc,CAAC,WACjC,YAAa,SAAS,cAAc,CAAC,gBACrC,cAAe,SAAS,cAAc,CAAC,kBACvC,cAAe,SAAS,cAAc,CAAC,iBACzC,EAEM,EAAW,CACf,MAAO,GACP,QAAS,GACT,QAAS,EACX,EAcA,SAAS,EAAW,CAAK,EACvB,OAAO,EAAM,QAAQ,GAAG,QAAQ,CAAC,EAAG,IACtC,CAuBA,YArBA,WACE,EAAS,OAAO,GAEZ,EAAS,OAAO,CAAG,IACrB,EAAS,OAAO,CAAG,GACnB,EAAS,OAAO,GAEZ,EAAS,OAAO,CAAG,IACrB,EAAS,OAAO,CAAG,GACnB,EAAS,KAAK,GAEV,EAAS,KAAK,CAAG,GACnB,CAAA,EAAS,KAAK,CAAG,EAAA,IA1BvB,EAAkB,KAAK,CAAC,WAAW,CAAG,EAAW,EAAS,KAAK,EAC/D,EAAkB,OAAO,CAAC,WAAW,CAAG,EAAW,EAAS,OAAO,EACnE,EAAkB,OAAO,CAAC,WAAW,CAAG,EAAW,EAAS,OAAO,EAGnE,EAAkB,WAAW,CAAC,WAAW,CAAG,EAAW,EAAS,KAAK,EACrE,EAAkB,aAAa,CAAC,WAAW,CAAG,EAAW,EAAS,OAAO,EACzE,EAAkB,aAAa,CAAC,WAAW,CAAG,EAAW,EAAS,OAAO,CAyB3E,EAG2B,KAG3B,IAAM,EAAc,SAAS,cAAc,CAAC,gBACtC,EAAc,SAAS,cAAc,CAAC,gBAE5C,SAAS,IAEW,AADL,EAAY,qBAAqB,GACvB,MAAM,CAAG,EAK9B,EAAY,SAAS,CAAC,MAAM,CAAC,WAF7B,EAAY,SAAS,CAAC,GAAG,CAAC,UAI9B,CAEA,OAAO,gBAAgB,CAAC,SAAU,GAClC,OAAO,gBAAgB,CAAC,SAAU,GAElC,GACF","sources":["<anon>","src/scripts/script.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Countdown Timer Logic\n    var countdownElements = {\n        hours: document.getElementById(\"hours\"),\n        minutes: document.getElementById(\"minutes\"),\n        seconds: document.getElementById(\"seconds\"),\n        stickyHours: document.getElementById(\"sticky-hours\"),\n        stickyMinutes: document.getElementById(\"sticky-minutes\"),\n        stickySeconds: document.getElementById(\"sticky-seconds\")\n    };\n    var timeLeft = {\n        hours: 23,\n        minutes: 59,\n        seconds: 59\n    };\n    function updateCountdown() {\n        // Update the main countdown\n        countdownElements.hours.textContent = formatTime(timeLeft.hours);\n        countdownElements.minutes.textContent = formatTime(timeLeft.minutes);\n        countdownElements.seconds.textContent = formatTime(timeLeft.seconds);\n        // Update the sticky panel countdown\n        countdownElements.stickyHours.textContent = formatTime(timeLeft.hours);\n        countdownElements.stickyMinutes.textContent = formatTime(timeLeft.minutes);\n        countdownElements.stickySeconds.textContent = formatTime(timeLeft.seconds);\n    }\n    function formatTime(value) {\n        return value.toString().padStart(2, \"0\");\n    }\n    function decrementTime() {\n        timeLeft.seconds--;\n        if (timeLeft.seconds < 0) {\n            timeLeft.seconds = 59;\n            timeLeft.minutes--;\n            if (timeLeft.minutes < 0) {\n                timeLeft.minutes = 59;\n                timeLeft.hours--;\n                if (timeLeft.hours < 0) timeLeft.hours = 23; // Reset to 23 hours when it reaches 0\n            }\n        }\n        updateCountdown();\n    }\n    // Start the countdown\n    setInterval(decrementTime, 1000);\n    // Sticky Panel Show/Hide Based on Scroll (Without IntersectionObserver)\n    var heroSection = document.getElementById(\"hero-section\");\n    var stickyPanel = document.getElementById(\"sticky-panel\");\n    function checkHeroVisibility() {\n        var rect = heroSection.getBoundingClientRect();\n        var isVisible = rect.bottom > 0;\n        if (!isVisible) stickyPanel.classList.add(\"visible\");\n        else stickyPanel.classList.remove(\"visible\");\n    }\n    window.addEventListener(\"scroll\", checkHeroVisibility);\n    window.addEventListener(\"resize\", checkHeroVisibility);\n    checkHeroVisibility(); // Initial check\n});\n\n//# sourceMappingURL=index.9d222836.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Countdown Timer Logic\n  const countdownElements = {\n    hours: document.getElementById('hours'),\n    minutes: document.getElementById('minutes'),\n    seconds: document.getElementById('seconds'),\n    stickyHours: document.getElementById('sticky-hours'),\n    stickyMinutes: document.getElementById('sticky-minutes'),\n    stickySeconds: document.getElementById('sticky-seconds'),\n  };\n\n  const timeLeft = {\n    hours: 23,\n    minutes: 59,\n    seconds: 59,\n  };\n\n  function updateCountdown() {\n    // Update the main countdown\n    countdownElements.hours.textContent = formatTime(timeLeft.hours);\n    countdownElements.minutes.textContent = formatTime(timeLeft.minutes);\n    countdownElements.seconds.textContent = formatTime(timeLeft.seconds);\n\n    // Update the sticky panel countdown\n    countdownElements.stickyHours.textContent = formatTime(timeLeft.hours);\n    countdownElements.stickyMinutes.textContent = formatTime(timeLeft.minutes);\n    countdownElements.stickySeconds.textContent = formatTime(timeLeft.seconds);\n  }\n\n  function formatTime(value) {\n    return value.toString().padStart(2, '0');\n  }\n\n  function decrementTime() {\n    timeLeft.seconds--;\n\n    if (timeLeft.seconds < 0) {\n      timeLeft.seconds = 59;\n      timeLeft.minutes--;\n\n      if (timeLeft.minutes < 0) {\n        timeLeft.minutes = 59;\n        timeLeft.hours--;\n\n        if (timeLeft.hours < 0) {\n          timeLeft.hours = 23; // Reset to 23 hours when it reaches 0\n        }\n      }\n    }\n\n    updateCountdown();\n  }\n\n  // Start the countdown\n  setInterval(decrementTime, 1000);\n\n  // Sticky Panel Show/Hide Based on Scroll (Without IntersectionObserver)\n  const heroSection = document.getElementById('hero-section');\n  const stickyPanel = document.getElementById('sticky-panel');\n\n  function checkHeroVisibility() {\n    const rect = heroSection.getBoundingClientRect();\n    const isVisible = rect.bottom > 0;\n\n    if (!isVisible) {\n      stickyPanel.classList.add('visible');\n    } else {\n      stickyPanel.classList.remove('visible');\n    }\n  }\n\n  window.addEventListener('scroll', checkHeroVisibility);\n  window.addEventListener('resize', checkHeroVisibility);\n\n  checkHeroVisibility(); // Initial check\n});\n"],"names":["document","addEventListener","countdownElements","hours","getElementById","minutes","seconds","stickyHours","stickyMinutes","stickySeconds","timeLeft","formatTime","value","toString","padStart","setInterval","textContent","heroSection","stickyPanel","checkHeroVisibility","rect","getBoundingClientRect","bottom","classList","remove","add","window"],"version":3,"file":"index.9d222836.js.map"}